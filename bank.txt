//Bank Withdraw,deposit and check the balace

//SPDX-License-Identifier: Unlicensed
// Solidity program to implement 
// the above approach 
pragma solidity ^0.8.0;

// Build the Contract
contract Bank
{
    // Create a structure for  
    // bank details 

    mapping(address=>uint) public balances;

    //Create a new functon to Deposite the money 
    //in the bank contract
    function deposit(uint _amount) public payable
    {
        //It checks the user balance
        balances[msg.sender] += _amount;
    }

    //Create a new function to 
    //withdraw amount from account 
    function withdraw(uint _amount) public
    {
        require(balances[msg.sender]>= _amount, "Not enough ether");
        balances[msg.sender] -= _amount;
    }

    //Create a new function to 
    //Display the balance of using address of different account
    function getBal() public view returns(uint)
    {
        return balances[msg.sender];
    }
}




---------------------------------------------------------------------------------------------------------------------------------

//Second-long



// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract Bank{
    address public owner;
    mapping(address => uint256) private userbalance;


    constructor() 
    {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, 'you are not the owner of this contract');
       _; 
    }

    function deposite() public payable returns(bool) {
        require(msg.value > 10 wei , 'please deposite atleast 10 wei');
        userbalance[msg.sender] += msg.value;
        return true;
    }

    function withdraw(uint256 _amount) public payable returns(bool) {
        require( _amount <=userbalance[msg.sender], 'you dont have sufficient funds');
        userbalance[msg.sender] -= _amount;
        payable(msg.sender).transfer(_amount);
        return true;
    }

    function getbalance() public view returns(uint256) {
        return userbalance[msg.sender];
    }

    function getcontractbalance() public view onlyOwner returns(uint256) {
        return address(this).balance;
    }

    function withdrawfunds(uint256 _amount) public payable onlyOwner returns(bool) {
        payable(owner).transfer(_amount);
        return true;
    }

}
